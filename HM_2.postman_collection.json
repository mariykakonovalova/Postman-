{
	"info": {
		"_postman_id": "4d526ec4-9d34-4a40-82dc-f84375f93386",
		"name": "HM_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string//\r",
							"pm.test(\"Body is correct\", function () {\r",
							"pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json//\r",
							"var response = pm.response.json()\r",
							"//Проверить, что name в ответе равно name s request//\r",
							"pm.test(\"response.name = request.name\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Maria\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age c request//\r",
							"pm.test(\"response.age = request.age\", function () {\r",
							"    pm.expect(response.age).to.eql(\"33\")\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request//\r",
							"pm.test(\"response.salary = request.salary\", function () {\r",
							"    pm.expect(response.salary).to.eql(500)\r",
							"});\r",
							"//Спарсить request//\r",
							"var request = request.data\r",
							"// Проверить, что name в ответе равно name s request//\r",
							"pm.test(\"response.name = request.name\", function () {\r",
							"    pm.expect(response.name).to.eql(request.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)//\r",
							"pm.test(\"response.age = request.age\", function () {\r",
							"    pm.expect(response.age).to.eql(request.age)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)//\r",
							"pm.test(\"response.salary = request.salary\", function () {\r",
							"    pm.expect(response.salary).to.eql(+request.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request//\r",
							"pm.test(\"response.u_salary_1_5_year = request.salary*4\", function () {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json//\r",
							"var response = pm.response.json();\r",
							"//Спарсить request//\r",
							"var request = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request//\r",
							"pm.test(\"name = name\", () => {\r",
							"    pm.expect(response.name).to.eql(request.name)\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request//\r",
							"pm.test(\"age = age\", () => {\r",
							"    pm.expect(response.age).to.eql(request.age)\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request//\r",
							"pm.test(\"salary = salary\" ,() => {\r",
							"    pm.expect(response.salary).to.eql(+request.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response//\r",
							"console.log(response.family);\r",
							"//Проверить, что у параметра dog есть параметры name//\r",
							"pm.test(\"dog have name\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age//\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky//\r",
							"pm.test(\"name = Luky\", function () {\r",
							"    pm.expect(response.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4//\r",
							"pm.test(\"age = 4\", function () {\r",
							"    pm.expect(response.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"//u_salary_1_5_year в ответе равно salary*4//\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function () {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Maria&age=33&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maria"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json//\r",
							"var response = pm.response.json()\r",
							"//Спарсить request//\r",
							"var request = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request//\r",
							"pm.test(\"name = name\", function () {\r",
							"    pm.expect(response.name).to.eql(request.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request//\r",
							"pm.test(\"age = age\", function () {\r",
							"   pm.expect(response.age).to.eql(+request.age)\r",
							"});\r",
							"//Вывести в консоль параметр salary из request//\r",
							"console.log(request.salary);\r",
							"//Вывести в консоль параметр salary из response//\r",
							"console.log(response.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response//\r",
							"console.log(response.salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response//\r",
							"console.log(response.salary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response//\r",
							"console.log(response.salary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request//\r",
							"pm.test(\"salary[0] = salary.request\", function () {\r",
							"    pm.expect(response.salary[0]).to.eql(+request.salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request//\r",
							"pm.test(\"salary[1] = salary*2\", function () {\r",
							" pm.expect(+response.salary[1]).to.eql(+request.salary*2)\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)//\r",
							"pm.test(\"salary[2] = salary*3\", function () {\r",
							" pm.expect(+response.salary[2]).to.eql(+request.salary*3)\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", request.name);\r",
							"pm.environment.set(\"age\", request.age);\r",
							"pm.environment.set(\"salary\", request.salary);\r",
							"\r",
							"console.log(pm.environment.get(\"salary\"));\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Maria&age=33&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maria"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json()\r",
							"\r",
							"var request = request.data;\r",
							" //Проверить, что json response имеет параметр start_qa_salary//\r",
							"pm.test(\"json response have start_qa_salary\", function () {\r",
							"pm.expect(response).to.property(\"start_qa_salary\")\r",
							"});\r",
							"//json response имеет параметр qa_salary_after_6_months//\r",
							"pm.test(\"json response have qa_salary_after_6_months \", function () {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// json response имеет параметр qa_salary_after_12_months//\r",
							"pm.test(\"json response have qa_salary_after_12_months \", function () {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//json response имеет параметр qa_salary_after_1.5_year//\r",
							"pm.test(\"json response have qa_salary_after_1.5_year \", function () {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//json response имеет параметр qa_salary_after_3.5_years//\r",
							"pm.test(\"json response have qa_salary_after_3.5_years \", function () {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have person \", function () {\r",
							"    pm.expect(response).to.property(\"person\");\r",
							"});\r",
							"//start_qa_salary равен salary из request (salary забрать из request.\r",
							"pm.test(\"start_qa_salary = salary.request \", function () {\r",
							"    pm.expect(response.start_qa_salary).to.eql(+request.salary);\r",
							"});\r",
							"//qa_salary_after_6_months равен salary*2//\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 \", function () {\r",
							"    pm.expect(+response.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
							"});\r",
							"//qa_salary_after_12_months равен salary*2.7//\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 \", function () {\r",
							"    pm.expect(+response.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
							"});\r",
							"//qa_salary_after_12_months равен salary*2.7//\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 \", function () {\r",
							"    pm.expect(+response.qa_salary_after_12_months).to.eql(+request.salary*2.7);\r",
							"});\r",
							"//qa_salary_after_1.5_year равен salary*3.3 из request//\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 \", function () {\r",
							"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.eql(+request.salary*3.3);\r",
							"});\r",
							"//qa_salary_after_3.5_years = salary*3.8 из request//\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 \", function () {\r",
							"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.eql(+request.salary*3.8);\r",
							"});\r",
							"//в параметре person, 1-й элемент из u_name равен salary из request//\r",
							"pm.test(\"person.u_name.[1] = salary.request \", function () {\r",
							"    pm.expect(response.person.u_name[1]).to.eql(+request.salary) ;\r",
							"});\r",
							"//параметр u_age равен age из request//\r",
							"pm.test(\"u_age = age.request \", function () {\r",
							"    pm.expect(response.person.u_age).to.eql(+request.age) ;\r",
							"});\r",
							"// u_salary_5_years равен salary*4.2 из request//\r",
							"pm.test(\"u_salary_5_years = salary*4.2 \", function () {\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(+request.salary*4.2);\r",
							"});\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person//\r",
							"console.log(response)\r",
							"\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var login = jsonData.token;\r",
							"\r",
							"console.log(\"TOKEN = \" + login);\r",
							"\r",
							"pm.environment.set(\"variable_key\" ,\r",
							"      \"varible_value\");\r",
							"      \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "password",
							"value": "0713",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}